const fs = require('fs');
let uiUpdates, quizLogic, quizElements;

beforeEach(() => {
const html = fs.readFileSync('./index.html', 'utf8');
document.documentElement.innerHTML = html;
({uiUpdates, quizLogic, quizElements} = require('../js/script'));
quizElements.questionsArr = [
{
id: 1,
question: "What does HTML stand for?",
options: ["Hyper Text Markup Language", "Home Tool Markup Language", "Hyperlinks and Text Markup Language"],
answer: 0,
hint: "It's a markup language."
}
];
quizElements.currentQuestion = 0;
});

test('should initialize the quiz and update the DOM elements correctly', () => {
const questionContainer = document.getElementById('question-container');
const heading = document.getElementById('heading');
const main = document.getElementById('main');
uiUpdates.initQuiz();
expect(questionContainer.style.display).toBe('flex');
expect(heading.style.display).toBe('flex');
expect(main.style.display).toBe('none');
});


test('should render the correct question along with its options', () => {
uiUpdates.renderQuestion();

    const currentQuestion = quizElements.questionsArr[quizElements.currentQuestion];
    const questionEle = document.getElementById('question').textContent;
    const options = document.getElementById('options').children;
    const questionNum = document.getElementById('queNum').textContent;
    const hintText = document.getElementById('hint').textContent;

    expect(questionEle).toBe(`${currentQuestion.id}. ${currentQuestion.question}`);
    expect(questionNum).toBe(currentQuestion.id.toString());
    expect(hintText).toBe(currentQuestion.hint);
    expect(options.length).toBe(currentQuestion.options.length);

    for (let i = 0; i < options.length; i++) {
        expect(options[i].textContent).toEqual(currentQuestion.options[i]);
    }
});

--------------------------------------------------------------------------------------------------
version - 2
--------------------------------------------------------------------------------------------------
beforeEach(() => {
    document.body.innerHTML =
        `<div id="main" style="display: block;">Main Menu</div>
         <div id="heading" style="display: none;">Quiz Heading</div>
         <div id="question-container" style="display: none;">Questions</div>
         <div id="options"></div>
         <div id="question"></div>
         <div id="queNum"></div>
         <div id="result-container" style="display: none;">Results</div>
         <div id="queDiv" style="display: block;"></div>
         <span id="score"></span>
         <span id="totalScore"></span>`;

    global.quizElements = {
        currentQuestion: 0,
        questionsArr: [
            {
                id: 1,
                question: 'What does HTML stand for?',
                options: [
                    { id: 'a', text: 'Hyper Text Markup Language' },
                    { id: 'b', text: 'Hyper Text Processor' }
                ]
            }
        ]
    };
    global.uiUpdates = {
        initQuiz: () => {
            uiUpdates.showMainElements();
            uiUpdates.renderQuestion();
        },
        showMainElements: () => {
            document.getElementById('main').style.display = 'none';
            document.getElementById('question-container').style.display = 'flex';
            document.getElementById('heading').style.display = 'flex';
        },
        renderQuestion: () => {
            const currentQuestion = quizElements.questionsArr[quizElements.currentQuestion];
            document.getElementById('question').textContent = `${currentQuestion.id}. ${currentQuestion.question}`;
            document.getElementById('queNum').textContent = currentQuestion.id;
            const optionsDiv = document.getElementById('options');
            optionsDiv.innerHTML = '';
            currentQuestion.options.forEach(option => {
                const btn = document.createElement('button');
                btn.textContent = option.text;
                optionsDiv.appendChild(btn);
            });
        },
        clearOptions: () => {
            const optionsDiv = document.getElementById('options');
            optionsDiv.innerHTML = '';
        },
        showResults: () => {
            document.getElementById('question-container').style.display = 'none';
            document.getElementById('result-container').style.display = 'flex';
            document.getElementById('queDiv').style.display = 'none';
            document.getElementById('score').textContent = quizElements.score.toString();
            document.getElementById('totalScore').textContent = quizElements.totalScore.toString();
        }
    };
});
describe('uiUpdates.initQuiz', () => {
    test('should initialize the quiz and update the DOM elements correctly', () => {

        const main = document.getElementById('main');
        const questionContainer = document.getElementById('question-container');
        const heading = document.getElementById('heading');
        const questionEle = document.getElementById('question');
        const queNum = document.getElementById('queNum');
        const optionsDiv = document.getElementById('options');

        uiUpdates.initQuiz();
        expect(main.style.display).toBe('none');
        expect(questionContainer.style.display).toBe('flex');
        expect(heading.style.display).toBe('flex');
        expect(questionEle.textContent).toBe('1. What does HTML stand for?');
        expect(queNum.textContent).toBe('1');
        expect(optionsDiv.children.length).toBe(2);
        expect(optionsDiv.children[0].textContent).toBe('Hyper Text Markup Language');
        expect(optionsDiv.children[1].textContent).toBe('Hyper Text Processor');
    });
});

describe('uiUpdates.renderQuestion', () => {
    test('should render the correct question along with its options', () => {
        uiUpdates.renderQuestion();

        const currentQuestion = quizElements.questionsArr[quizElements.currentQuestion];
        const questionEle = document.getElementById('question').textContent;
        const options = document.getElementById('options').children;
        const questionNum = document.getElementById('queNum').textContent;

        expect(questionEle).toEqual(`${currentQuestion.id}. ${currentQuestion.question}`);
        expect(questionNum).toEqual(currentQuestion.id.toString());
        expect(options.length).toBe(currentQuestion.options.length);

        for (let i = 0; i < options.length; i++) {
            expect(options[i].textContent).toEqual(currentQuestion.options[i].text);
        }
    });
});

describe('uiUpdates.clearOptions', () => {
    test('should clear all previously rendered options', () => {
        const optionsDiv = document.getElementById('options');
        const option1 = document.createElement('button');
        const option2 = document.createElement('button');
        optionsDiv.appendChild(option1);
        optionsDiv.appendChild(option2);

        expect(optionsDiv.children.length).toBe(2);

        uiUpdates.clearOptions();
        expect(optionsDiv.children.length).toBe(0);
    });
});

describe('uiUpdates.showResults', () => {
    test('should display the results screen with the correct score', () => {
        // Set up initial state
        quizElements.score = 5;
        quizElements.totalScore = 10;

        uiUpdates.showResults();
        expect(document.getElementById('question-container').style.display).toBe('none');
        expect(document.getElementById('result-container').style.display).toBe('flex');
        expect(document.getElementById('queDiv').style.display).toBe('none');
        expect(document.getElementById('score').textContent).toBe('5');
        expect(document.getElementById('totalScore').textContent).toBe('10');
    });
});

### QuizLogic

beforeEach(() => {
    document.body.innerHTML = `
        <div id="main" style="display: block;">Main Menu</div>
        <div id="heading" style="display: none;">Quiz Heading</div>
        <div id="question-container" style="display: none;">Questions</div>
        <div id="options"></div>
        <div id="question"></div>
        <div id="queNum"></div>
        <div id="result-container" style="display: none;">Results</div>
        <div id="queDiv" style="display: block;"></div>
        <span id="score"></span>
        <span id="totalScore"></span>`;

    global.quizElements = {
        currentQuestion: 0,
        questionsArr: [
            {
                id: 1,
                question: 'What does HTML stand for?',
                options: [
                    { id: 'a', text: 'Hyper Text Markup Language' },
                    { id: 'b', text: 'Hyper Text Processor' }
                ],
                type: 'multiple_choice'
            }
        ],
        selectedAnswers: []
    };

    global.quizLogic = {
        handleOptionClick: (optionId) => {
            const currentQuestion = quizElements.questionsArr[quizElements.currentQuestion];
            if (currentQuestion.type === 'multiple_choice' || currentQuestion.type === 'true_false') {
                quizElements.selectedAnswers = [optionId];
            } else if (currentQuestion.type === 'multiple_answer') {
                if (quizElements.selectedAnswers.includes(optionId)) {
                    quizElements.selectedAnswers = quizElements.selectedAnswers.filter(id => id !== optionId);
                } else if (quizElements.selectedAnswers.length < 2) {
                    quizElements.selectedAnswers.push(optionId);
                } else {
                    alert('You can only select up to 2 answers.');
                }
            }
        }
    };
});

describe('quizLogic.handleOptionClick', () => {
    test('should update selected answer for multiple_choice question', () => {
        const optionId = 'a';
        quizLogic.handleOptionClick(optionId);
        expect(quizElements.selectedAnswers).toEqual([optionId]);
    });

    test('should update selected answer for true_false question', () => {
        quizElements.questionsArr[0].type = 'true_false';
        const optionId = 'b';
        quizLogic.handleOptionClick(optionId);
        expect(quizElements.selectedAnswers).toEqual([optionId]);
    });

    test('should update selected answers for multiple_answer question', () => {
        quizElements.questionsArr[0].type = 'multiple_answer';
        const optionId1 = 'a';
        const optionId2 = 'b';
        quizLogic.handleOptionClick(optionId1);
        quizLogic.handleOptionClick(optionId2);
        expect(quizElements.selectedAnswers).toEqual([optionId1, optionId2]);
    });

    test('should not allow more than 2 answers for multiple_answer question', () => {
        quizElements.questionsArr[0].type = 'multiple_answer';
        const optionId1 = 'a';
        const optionId2 = 'b';
        const optionId3 = 'c';
        quizLogic.handleOptionClick(optionId1);
        quizLogic.handleOptionClick(optionId2);
        quizLogic.handleOptionClick(optionId3);
        expect(quizElements.selectedAnswers).toEqual([optionId1, optionId2]);
    });
});

describe('quizLogic.handleSingleSelection', () => {
    test('should update selected answer and highlight it', () => {
        const optionsDiv = document.getElementById('options');
        const option1 = document.createElement('button');
        option1.id = 'a';
        const option2 = document.createElement('button');
        option2.id = 'b';
        optionsDiv.appendChild(option1);
        optionsDiv.appendChild(option2);

        quizLogic.handleSingleSelection('a');
        expect(quizElements.selectedAnswers).toEqual(['a']);
        expect(option1.style.borderColor).toBe('green');
        expect(option2.style.borderColor).toBe('initial');
    });
});

In terms of Single Responsibility Principle (SRP), this code mostly adheres to it, but there are a few areas that could
be improved. Here's an analysis of how well each part follows SRP:
What SRP Means:

SRP states that a class, module, or function should have one, and only one, reason to change. In practice, this means
 each function or component should focus on a single task or responsibility.
Analyzing the Code:

    quizElements and questionsArr:
        SRP Status: Good.
        Explanation: The quizElements object is responsible for maintaining the state of the quiz (e.g., currentQuestion,
        score, selectedAnswers). It’s centralized and doesn’t do more than that, which aligns with SRP. Similarly,
        questionsArr holds the questions and is separated from logic, so it's SRP-compliant.

    initQuiz Function:
        SRP Status: Needs Improvement.
        Explanation: This function initializes the quiz by calling multiple different functions (showMainElements,
        calculateTotalScore, renderQuestion). This is more like a coordinator function, which is okay, but it does multiple
        things. If the initialization process changes (e.g., UI rendering, score calculation), this function could break SRP.
        Suggestion: You could split the quiz setup responsibilities into separate functions, e.g., initializeUI and initializeQuizState.

    calculateTotalScore Function:
        SRP Status: Good.
        Explanation: This function is responsible only for calculating the total score based on the answers. It focuses
        on one responsibility (calculating score) and is compliant with SRP.

    showMainElements Function:
        SRP Status: Good.
        Explanation: It’s responsible only for controlling the display of certain HTML elements when the quiz starts.
        This single responsibility makes it SRP-compliant.

    renderQuestion Function:
        SRP Status: Needs Improvement.
        Explanation: This function is responsible for displaying the current question, clearing previous options,
        rendering new options, updating the question count, and starting the timer. It’s handling multiple tasks,
        so if any of these responsibilities change, the function would need to be modified.
        Suggestion: You could split this into smaller functions, like displayQuestion, renderOptions, and
        startQuestionTimer, to make it more SRP-compliant.

    renderOptions Function:
        SRP Status: Good.
        Explanation: This function focuses on rendering the appropriate options for the current question, and the logic
        for different types of questions is well-handled. It could be considered SRP-compliant as it has a single focus.

    handleOptionClick Function:
        SRP Status: Good.
        Explanation: This function only handles user interaction when an option is clicked, which is a focused responsibility.

    highlightAnswer Function:
        SRP Status: Good.
        Explanation: This function is responsible for visually indicating which answer is correct or incorrect. This
        responsibility is focused and SRP-compliant.

    nextQuestion Function:
        SRP Status: Needs Improvement.
        Explanation: This function handles multiple responsibilities, such as validating answers, updating the score,
        rendering the next question, and starting the next timer. It could be broken into smaller functions.
        Suggestion: Split into smaller functions like validateAnswers, moveToNextQuestion, and updateUIForNextQuestion.

    startTimer Function:
        SRP Status: Good.
        Explanation: This function handles the timer logic, and that's its only responsibility.

    updateScore Function:
        SRP Status: Good.
        Explanation: This function focuses on updating the score based on the question type, and it delegates the actual
         checking of answers to other functions. It adheres to SRP.

Recommendations for Improvement:

    Smaller Functions: Break down larger functions like renderQuestion, nextQuestion, and initQuiz into smaller functions to
    improve readability, maintainability, and SRP compliance.
    Function Naming: Make sure that function names reflect their focused responsibility, such as startQuestionTimer
    instead of just startTimer to make the role clearer.

Conclusion:

Overall, the code is structured well, and most functions follow the Single Responsibility Principle. A few larger
 functions can be refactored to ensure each function has only one responsibility, which will make the code easier to
 maintain and less prone to bugs when changes are made.

